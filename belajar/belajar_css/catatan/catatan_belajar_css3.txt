CSS3

1. BORDER RADIUS
untuk membuat border menjadi tumpul. makin besar nilainya, makin tumpul. maksimal nilai border radius itu 50% dari lebar dan tingginya (kalau divnya kotak). saat nilai bordernya 50%, div-nya akan berubah jadi lingkaran.

penulisan border radius: 
border radius: 50%;

kalau penulisan border radius untuk masing-masing sisi:
border-top-right-radius: 50%;
border-bottom-right-radius: 50%;
border-bottom-left-radius: 50%;
border-top-left-radius: 50%;

kalau mau nulis radius masing-masing sisi sekaligus:
border-radius: 10% 15% 16% 17%;
10% : kanan atas
15% : kanan bawah
16% : kiri bawah
17% : kiri atas
jadi urutannya sesuai jarum jam.

kalau misal, div dikasih border radius, isi dari div itu akan keluar dari kotak (karna bordernya kan tumpul, jadi isi div yang ada di ujung bakal keliatan kayak diluar div). cara ngaturnya, bisa pake overflow: hidden.

-------------------------------------------

2. OPACITY
untuk membuat gambar transparan. nilai opacity adalah 0-1. makin kecil makin transparan.

elemen yang ada di dalam sebuah div akan ngikutin opacity dari div (parent) itu. tapi, div itu ga akan keliatan dari elemen karena opacity dari elemen sama dengan opacity div. kalau mau divnya keliatan dari balik elemennya, opacity elemennya perlu dikasih nilai lebih rendah.

kita bisa buat elemen di atasnya lebih transparan dari parentnya. tapi, kita gabisa buat elemen di dalam div (parent) bener-bener ga transparan. pasti elemen itu (di luar dari div) tetep transparan. 

kalau mau divnya aja yang transparan dan elemennya nggak, pake rgba. 

-------------------------------------------

3. RGBA()
dia menambahkan satu parameter namanya alpha yang bisa buat kita ngatur warna dan transparansi. minusnya dari opacity, opacity bisa dipake untuk semua elemen. kalo rgba cuma bisa dielemen yang bisa dikasih warna, jadi img gabisa karna image gaada color dan background color. 

cara nulisnya: 
background-color: rgba(warna red, warna green, warna blue, opacity). 

kayak nulis rgb (red green blue) yang butuh tiga angka, tapi rgba nambahin satu lagi, yaitu alpha di bagian akhir untuk opcaity. 

-------------------------------------------

4. HSLA()

sama kayak rgba, cuma kalo rgba pake red green and blue, hsla pake hue saturation light. di dua-duanya a itu alpha buat opacity. 

penulisannya: 
background-color: hsla(hue, saturation, light, alpha)

-------------------------------------------

5. BOX SHADOW

yang bisa diatur dalam box shadow ada:
a. opacity
b. angle (sudut datang cahaya)
c. distance (jarak bayangan terhadap objeknya)
d. size (mengatur ukuran dari blur bayangan, makin besar makin blur)
e. spread (memperbesar bayangannya)

penulisannya
box-shadow: <inset> <x-offset> <y-offset> <blur> <spread> <color>
catatan:
a. inset (optional, bayangan bisa jadi ada di dalam kotak/elemen, bukan diluar. tinggal tulis 'inset' aja)
b. x-offset (jarak bayangan terhadap objek secara horizontal)
c. y-offset (jarak bayangan terhadap objek secara vertikal)
d. blur
e. spread (opstional, ukuran dari bayangan)
f. color (biasanya pake rgba agar bisa ditambahin opacity)

multiple shadow: kita bisa nambahin shadow lebih dari satu dengan nambahin value shadow itu setelah shadow sebelumnya dan membatasinya dengan koma. contoh: 

box-shadow: 5px 5px 5px rgba(0,0,0,.5), -5px -5px 5px rgba(0,0,0,.5)

shadownya akan jadi ada dua. 

-------------------------------------------

6. TEXT SHADOW
sama kayak box shadow tapi gaada yang optional-nya (inset dan spread). 
penulisannya juga sama kayak box shadow. 
textshadow: <x-offset> <y-offset> <blur> <color>

text-shadow juga bisa punya multiple shadow

contoh: 
text-shadow: 5px 5px 5px rgba(0,0,0,.5), -5px -5px 5px rgba(0,0,0,.5)

-------------------------------------------

7. GRADIENTS

untuk mengatur gradasi warna. ada dua: 
a. linear gradient (memberikan gradient secara garis lurus)
b. radial gradient (memberikan gradient secara melingkar)

A. LINEAR GRADIENT
linear-gradient bukan property css3, melainkan value lain selain url untuk background-image. 

contoh penulisan:
background-image: linear-gradient(<warna awal>, <warna tengah>, <warna akhir>);

warnanya bisa lebih dari satu. secara default arah gradasinya dari atas ke bawah. tapi bisa diatur lagi arahnya, caranya:
background-image: linear-gradient(<sudut>/<arah>, <warna awal>, <warna akhir>);

contoh kalo pake sudut: 
background-image: linear-gradient(90deg, red, green);

kalo pake arah, valuenya ada:
to bottom, to top, to left, to right, to left top, to left bottom, to right top, to right bottom.

contohnya:
background-image: linear-gradient(to left, red, green);

secara default, gradasi warna yang tampil akan seimbang antar tiap warna. cara untuk mengatur mana warna yang dominan, bisa pake color stop. 
caranya:
background-image: linear-gradient(to left, red 63%, green 80%);

63% dan 80% itu posisi warnanya. 

B. RADIAL GRADIENT
sintak sederhananya sama dengan linear gradient. 
background-image: linear-gradient(<warna pusat>, <warna tengah>, <warna akhir>);

gerak gradasinya dari pusat lingkaran/elemen ke arah luar elemen/lingkaran.

color stopnya sama dengan linear gradient.

sintak lengkapnya agak berbeda dengan linear gradien: 
radial-gradient(
    <tipe> <jangkauan> at <posisi-y> <posisi x>,
    <warna 1>
    ...
    <warna-n>
);

untuk yang tipe dan jangkauan sifatnya optional. 

tipe ada dua value: ellipse dan circle. 

jangkauan adalah jarak dari pusat gradient ke sisi terluarnya. ini untuk menentukan dimana gradient itu berhenti, di sisi terdekat, sudut terdekat, sisi terjauh, atau sudut terjauh. value dari jangkauan: 
- closest-corner (sudut terdekat)
- closest-side (sisi terdekat)
- farthest-corner (sudut terjauh)
- farthest-side (sisi terjauh)

contoh penulisan:
background-image: radial-gradient(circle closest-side, red, green);

cara memindahkan posisi pusat gradient. valuenya ada top center bottom atau ukuran dalam pixel. 
contoh: 
background-image: radial-gradient(circle closest-side at top left, red, green);
nanti pusat gradasinya ada di top left dari elemen. 

-------------------------------------------

8. FONT FACE
untuk mengatur font yang ada pada halaman web kita. 

fonts yang kita gunakan harus ada di komputer user. tapi, kalau mau pake font yang gaada di komputer use, bisa pake google fonts, tapi harus ada internet. 

kalau, mau pake yang font yang gaada di google fonts? pake @font-face

cara penulisannya: 
@font-face{
font-family: 'namaFontBaru';
src: url('lokasi/file/fontbaru.eot');
src: url('lokasi/file/fontbaru.eot?#iefix') format('embedded-opentype'),
     url('lokasi/file/fontbaru.woff2') format('woff2'),
     url('lokasi/file/fontbaru.woff') format('woff'),
     url('lokasi/file/fontbaru.tff') format('truetype'),
     url('lokasi/file/fontbaru.svg#svgFontName') format('svg');
}

itu url yang lain itu ga harus ditulis semua, tergantung format font yang kita punya. yang paling bagus itu format woff. 

kalau yang kita dapat ttf, kita bisa ubah jadi woff. dengan web font generator. Beberapa website download font ada yang nyediain fitur ini. 

-------------------------------------------

9. VENDOR PREFIX(ES)
ini adalah sintaks khusus yang harus ditambahkan untuk beberapa properti css3 biar sintaks itu bisa jalan di semua browser.

sintaks khusus ini nanti berbeda di tiap2 browser.

sintaksnya ada yang: 
a. -webkit- (untuk chrome, safari, opera versi terbaru)
b. -moz- (firefox)
c. -ms- (ie)
d. -o- (opera versi lama)

contoh penulisannya, misal kita mau tambahin properti filter tapi gabisa dibuat di chrome: 
-webkit-filter: grayscale(100%); 
tapi properti utamanya jangan dihilangkan. (filter:grayscale(100%)).

untuk tau properti apa aja yang harus dikasih previx, bisa liat di shouldiprevix.com, caniuse.com (lebih lengkap), pleeease.io/play (kalo pake web ini, tinggal copas aja sintaks kita trus nanti dia kasih sintaks benernya, jadi tinggal copas aja), atau bisa juga dengan nambahin plugin emmet di code editor kita (ini lebih gampang lagi). 

-------------------------------------------

10. FILTER
cara penulisannya: 
filter: <tipe-filter>;

tipe filternya ada: 
blur, brightness, contrast, saturate, grayscale, sepia, hue-rotate, invert, opacity, drop-shadow. 

cara penulisan masing-masing filter: 
- blur(px);
- brightness(angka | %); [defaultnya 100% atau 1, makin rendah dari 1/100% makin gelap, makin di atas 1/100% makin terang]
- contrast((angka | %); [ngaturnya kayak brightness]
- saturate(angka | %); [ngaturnya kayak brightness]
- grayscale(angka | %); [nilai defaultnya 100% tapi makin tinggi makin abu-abu]
- sepia(angka | %); [ngaturnya sama kayak grayscale]
- hue-rotate(deg); [untuk merotasi warna, jadi dia ngubah warnanya]
- invert(angka | %); [untuk mengubah filmnya jadi kayak negative film]
- opacity(angka | %); 
- drop-shadow(<x-offset> <y-offset> <blur> <color>). [bisa buat box shadow bisa buat text shadow, dan dia ngsaih bayangan di elemen yang trasnparan di elemen yang diberi filter ini]

contoh penulisan:
filter: blur(5px) grayscale(100%); 

bisa multiple filter.

-------------------------------------------

11. TRANSFORM
memungkinkan kita memanipulasi format visual dari elemen HTML. kita bisa melakukan transformasi secara 2d dan 3d.

ini yang 2d. 

penulisannya: 
transform: <fungsi-transform>;

fungsi-transformnya:
- scale [memperbesar/memperkecil, nilai default 1, dari 0-1 makin kecil, 1< makin besar]
transform: scale(angka)	
- rotate [memutar]
transform: rotate(deg) atau transform: rotate(xdeg) atau  transform: rotate(xdeg) atau transform: rotate(deg), rotateX(xdeg), rotateY(ydeg)
x deg berarti bergerak sesuai sumbu x, y sesuai dengan sumbu y.
- skew [membuat condong/miring]
transform: skew(deg)
- translate [mengubah posisi]
transform: translate(angka) atau transform: translate(angka), translateX(geser sesuai sumbu x), translateY(geser sesuai sumbu y) atau transform: translate(geser sumbu x, geser sumbu y).

bisa multiple, contoh: 
transform: scale(2) rotate(360deg);
nanti dia membesar dan memutar.

-------------------------------------------

12. TRANSITION
untuk mengubah nilai dari css secara halus. bedanya dengan animasi, transisi cuma bisa dua keadaan (keadaan awal dan akhir), kalo animasi bisa lebih dari dua keadaan (keadaan awal, keadaan antara/keyframe, dan keadaan akhir). 

penulisannya: 
transition: <property> <durasi> <fungsi> <delay>; [ga harus berurutan penulisannya, yang pasti untuk angka, kalo ada dua angka, angka pertama adalah durasi angka kedua adalah delay]

yang wajib harus ditulis cuma durasi, yang lainnya optional. 

simpan properti transition di keadaan awalnya (bukan di hover, biasanya keadaan akhirnya ditaro di hover). 

value optional dari transition: 
- property: di sini kita bisa ngubah beberapa properti saja. karena secara default, transisi akan melakukan transisi untuk semua perubahan yang akan terjadi. tapi kalo kita tambahin property kita bisa pilih yang mana aja yang bakal di transisi-kan.
- fungsi: untuk membuat jalan transisinya sesuai dengan fungsi yang kita pilih. bisa ease-in, ease-out, dll. 
- delay: delay gerak transisi sesuai waktu yang dimasukkan. 

ada beberapa property yang gabisa dianimasi/transisikan, salah satunya:: font-family, display, position, dll.

contoh penulisan: 
transition : background-color 3s, transform 4s 4s.

jadi transisinya akan mentransisi background-color selama 3 detil dan transform selama 4 detik dengan (khusus untuk transform) baru berjalan setelah 4 detik.

-------------------------------------------

13. ANIMATION
cara penulisannya:
@keyframes [name]{
	from/0%{
		[property-css]
	}
	50%{
		[property-css]
	}
	to/100%{
		[property-css]
	}
}

bisa ditulis dimana aja di dalam file css kita. tapi, untuk menggunakannya, ditambahin di selector dari elemen yang mau kita pakein animasi. 
contoh penulisannya:
animationL namakeyframe durasi;

ada banyak value animasi selain durasi:
[duration] [timing-function] [delay] [iteration-count] [direction] [fill-mode] [play-state]

- interation-count: animasinya bisa diloop terus menerus, bisa 2 kali 3 kali atau infinite.
- direction: menentukan direction dari animasi, ada normal, reverse, alternate, alternate-reverse. yang keren alternate, jadi bisa balik lagi ke posisi awal dengan nambahin nanti fill-mode. 
- fill-mode: menentukan akhir dari animasi (biar berhentinya di keadaan akhir, pake forwards).
play-state: ada running/paused. tapi paused bener-bener berhenti, kalo mau paused di tengah-tengah, harus pake javasript. 